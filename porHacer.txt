***************
MediaDescriptor:
---------------

*Habría que crear un "Factory" para separar la definición de descriptor de la creación de descriptores.
    -Llevar al Factory las constantes y los getInstance
    -Gestionar la lista de parámteros de otra forma (no como un Object[])

*El 'calculate': tiene sentido especificar que un descriptor ha de poder calcularse dado un medio, pero no tengo claro este enfoque. Podráimos pensar en un constructor 
(o un 'getInstace") que admita un medio como parámetro, de forma que se cree una instancia de descriptor. El enfoque actual plantea que haya un descriptor ya creado y que 
se recalculen sus valores cuando se llame a 'calculate' (yo apostaría por el primer enfoque y, en todo caso, métodos 'set' para modificar)

*El 'compare' es el que veo más correcto

En base a lo anterior: ¿definir 'MediaDescriptor' como un interface?


****************************
VisualDescriptor
|- VisualHighLevelDescriptor
|- VisualLowLevelDescriptor
|--|-ColorDescriptor
|--|-TextureDescriptor
|--|-ShapeDescriptor
|--|-MotionDescriptor
AudioDescriptor
Annotation
----------------------------
Aunque pretende recoger la taxonomía de descriptores, a nivel de diseño PDO no aportan: son subclases vacías sin datos ni fucionalidad (métodos); la unica excepción es el 
'ColorDescriptor' que incluye como dato el espacio de color.

A priori, podría plantearse eliminar la jerarquía anterior y dejar solo 'MediaDescriptor' y, a lo mejor, un segundo nivel ('VisualDescriptor', 'AudioDescriptor'); quizás 
podría incluirse en la superclase un método 'get' que devolviese el tipo (si es de imagen, video, audio,...)



***************************
DescriptorCollection
--------------------------

*Sería mejor usar tipos genéticos y declarar la collección como una colección de 'MediaDescriptor'
